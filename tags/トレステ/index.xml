<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>トレステ on まくまく投資ノート</title><link>https://toushi.maku.blog/tags/%E3%83%88%E3%83%AC%E3%82%B9%E3%83%86/</link><description>Recent content in トレステ on まくまく投資ノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 03 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://toushi.maku.blog/tags/%E3%83%88%E3%83%AC%E3%82%B9%E3%83%86/index.xml" rel="self" type="application/rss+xml"/><item><title>EasyLanguage のコーディングルール（スタイル）</title><link>https://toushi.maku.blog/p/5wet9n3/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/5wet9n3/</guid><description>スペース インデントは半角スペース x4 で行う（タブは使用しない）。 大文字・小文字 小文字で始める 制御構文: if、begin、and など プリミティブ型名: bool、double、null、スキップワード（a、at など） 変数定義: input: で宣言する入力変数や var: で宣言するローカル変数 大文字で始める 関数: AverageFC、StdDev など（ユーザー定義関数を含む） 売買命令: Buy、SellShort など（関数名っぽいので大文字で） 組み込み変数: Open、Close、CurrentBar、Date、Time など すべて大文字 定数: const: で宣言するもの 変数宣言のセクション名 入力変数は input:、定数は const:、変数は var: を使う（一番短い記述のものを採用）。
記述例 input: iPrice(Close) [DisplayName = &amp;#34;Price&amp;#34;, ToolTip = &amp;#34;Enter an EasyLanguage expression.&amp;#34;]; const: BASELINE_COLOR(&amp;#34;Green&amp;#34;); var: double myAvg(0), HorizontalLine myLine1(null), HorizontalLine myLine2(null); // ここから本文 上記では、入力変数のプレフィックスに i、ローカル変数のプレフィックスに my を付けていますが、付けなくても OK（myAvg の代わりに avg とかでよい）。 ただし、定義済みの変数名や関数名と被るのを避けるために、プレフィックスを付けるのをオススメします。
改行位置 then や begin は基本的に同じ行に続けて記述、end; は単独行に記述。 if AlertEnabled and alertCondition then begin if alertCond1 then Alert(&amp;#34;Close crossed under high retrace&amp;#34;) else Alert(&amp;#34;Close crossed over low retrace&amp;#34;); end; ただし、関数（メソッド）定義の場合は、begin の前に var 定義が挟まるので、その場合は begin は単独行に記述します。</description></item><item><title>トレステの操作: トレーリングストップ注文を出す</title><link>https://toushi.maku.blog/p/cw8t4eo/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/cw8t4eo/</guid><description>トレステのオーダーバーから、トレーリングストップ注文を出すことができます。 オーダーバーが表示されていない場合は、下記のいずれかの方法で表示できます。
メニューから 表示 → オーダーバー を選択 Ctrl + Shift + O （ホットキー入力） .ob &amp;lt;Enter&amp;gt; （コマンド入力） 保有している現物株をトレーリングストップで売るには以下のようにします。
注文種類で 逆指値（成行） を選択する トレーリングストップ注文を出すには、逆指値（成行）を選択しておく必要があります。他の注文種類を選択すると、次の 詳細 ボタンが表示されません。 詳細 ボタンを押して、 トレーリングストップ にチェックを入れる。 いくら下落したら売るかは、パーセンテージ での指定と、 価格 (Pts) での指定を選ぶことができます。ここでは、5％の下落で売るように設定しています。 現物売り ボタンを押して注文を発行します。 デフォルトでは下記のような注文確認画面が表示されるので、ここで はい ボタンを押せば実際に注文が発行されます。 トレーリングストップが正しく設定されているかをここで確認しましょう。</description></item><item><title>トレステの設定: トレステ開発環境で最初に設定しておきたい項目</title><link>https://toushi.maku.blog/p/6zgwdr7/</link><pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/6zgwdr7/</guid><description>トレステ開発環境のエディタ設定は、メニューから次のようにたどると開くことができます。
ツール → オプション ここでは、次のような設定を行なっています。
インデントする際にタブの代わりにスペースを挿入 にチェック タブ文字の代わりに、半角スペース x 4 を使うようにします。 ライン番号 にチェック 各行の左端に行番号が表示されるようになります。 ケーススタイル で 小文字 を選択 input、var、if などの文頭が小文字に統一されます（関数名などは入力したまま大文字・小文字が保持されます）。 エディタのカラー設定や、フォント設定もこのダイアログから行うことができます。</description></item><item><title>EasyLanguage の変数の特徴（値の伝搬のしくみ）</title><link>https://toushi.maku.blog/p/xgr3cku/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/xgr3cku/</guid><description>EasyLanguage でユーザー変数を定義するときは、次のように var: を使います（variables: でも OK）。
var: int hoge(0); このように定義した変数 hoge は、次のような性質を持ちます。
チャートにアタッチしたときのみ初期化される（上記の例では 0 に初期化される）。 変数に代入した値は、次の足の処理に引き継がれる。 hoge[n] とすると、n 本前の足の最終的な値を参照できる。hoge[0] は hoge と同じ意味になる。 この振る舞いは、次のようなサンプルコードを実行してみるとよく分かります。 このプログラムでは、初期値 0 の数値変数 hoge を定義し、各足の処理ごとにインクリメントしています。 そして最後に、現在の hoge の値と、1 つ前、2 つ前の足での hoge の値を出力しています。
サンプルコード var: int hoge(0); hoge += 1; Print(String.Format(&amp;#34;{0} {1} {2}&amp;#34;, hoge[0], hoge[1], hoge[2])); 実行結果 1 0 0 2 1 0 3 2 1 4 3 2 5 4 3 hoge に代入された値は次の足へと引き継がれていくため、1、2、3、4、5 とひとつずつ増えていきます。 最初の足の処理で、hoge[1]、hoge[2] のように過去の足の値を参照した場合は、初期値で設定している 0 が得られます。</description></item><item><title>EasyLanguage で垂直線を描画する (VerticalLine)</title><link>https://toushi.maku.blog/p/f3gs6gs/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/f3gs6gs/</guid><description>垂直線を引く方法 DrawingObjects.Add() で、VerticalLine オブジェクトを追加することで、画面上に垂直線を追加することができます。 これは、水平線 (HorizontalLine) を引く方法と同様です。
参考: 水平線を描画する (HorizontalLine) VerticalLine オブジェクトで垂直線を表示する コード 次のサンプルコードでは、日付が変わるタイミングで垂直線を描画しています。
#DateLine using elsystem.drawingobjects; var: bool myIsBarTypeProper(false), BNPoint myPoint(null), VerticalLine myLine(null); method void DrawVerticalLine() begin myPoint = BNPoint.Create(CurrentBar, 0); myLine = VerticalLine.Create(myPoint); myLine.Color = elsystem.drawing.Color.GreenYellow; myLine.Style = elsystem.drawingobjects.StyleType.Solid; myLine.Weight = 3; DrawingObjects.Add(myLine); end; once begin // ティック足(0)、分足(1)、秒足(14) のときのみ描画 myIsBarTypeProper = (BarType = 0) or (BarType = 1) or (BarType = 14); end; // 日付が変わった時に垂直線を描画 if myIsBarTypeProper and (Date &amp;gt; Date[1]) then begin DrawVerticalLine(); end; 解説 VerticalLine オブジェクトは、VerticalLine.</description></item><item><title>EasyLanguage で水平線を描画する (HorizontalLine)</title><link>https://toushi.maku.blog/p/ufr2cmv/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/ufr2cmv/</guid><description>水平線を引く方法 インジケーターで水平線を引くには下記のような方法があります。
Drawing Object の一種である HorizontalLine を追加する Plot1 関数などで固定 Price の線を引く 後者の方法は、Plot1(100) のように、固定価格でライン描画してしまう方法ですが、この値がインジケーターで求められた値として使われてしまうので、あまり望ましい方法ではないでしょう。 チャート上でローソク足が存在する部分しかラインが引かれないという欠点もあります。
そこで、ここでは前者の HorizontalLine を使った方法を採用することにします。
HorizontalLine オブジェクトで水平線を表示する DrawingObjects.Add() で、HorizontalLine オブジェクトを追加することで、画面上に水平線を追加することができます。 次のサンプルコードでは、各足の高値 (High) と安値 (Low) の位置に水平線を描画しています。
using elsystem.drawingobjects; // HorizontalLine オブジェクト用の変数 vars: HorizontalLine myLine1(null), HorizontalLine myLine2(null); // チャート上に水平線を追加 myLine1 = HorizontalLine.Create(High); myLine2 = HorizontalLine.Create(Low); DrawingObjects.Add(myLine1); DrawingObjects.Add(myLine2); // 水平線のスタイルや色、太さを変更可能 myLine1.Style = elsystem.drawingobjects.StyleType.Solid; myLine2.Style = elsystem.drawingobjects.StyleType.Dotted; myLine1.Color = elsystem.drawing.Color.Crimson; myLine2.Color = elsystem.drawing.Color.DeepSkyBlue; myLine1.Weight = 2; myLine2.Weight = 1; 参考リンク 垂直線を描画する (VerticalLine) インジケーターサンプル「本日のOHLCラインを表示する」</description></item><item><title>トレステの便利なショートカットキーとコマンド</title><link>https://toushi.maku.blog/p/2mx9jt4/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/2mx9jt4/</guid><description>トレステ内のウィンドウは、ショートカットキーやコマンドで操作することができます。 ショートカットキーは、Ctrl + N などでおなじみのいわゆるホットキーですが、トレステで特徴的なのは、コマンド (Command Line) です。
コマンドは、 ドット (.) で始まるコマンド名 として定義されており、キーボードからコマンドを入力して Enter キーを押すことで、アクティブなウィンドウを素早く操作することができるようになっています。 例えば、チャート分析ウィンドウをアクティブにした状態で、.iat と入力して Enter キーを押すと、「分析テクニックの挿入」のダイアログを素早く開くことができます。
全般的なショートカットキー＆コマンド ショートカットキー、あるいはコマンドのどちらかを覚えておけば OK です。
ショートカットキー コマンド 説明 Alt + → / Ctrl + Tab 次のウィンドウをアクティブにする Alt + ← / Ctrl + Shift + Tab 前のウィンドウをアクティブにする Ctrl + O 「ワークスペース」を開く Ctrl + W 「ワークスペース」を閉じる Ctrl + P .p .print チャートの印刷（チャートを開いている場合のみ） Ctrl + N .nw .newwindow 「トレーディングアプリ」の起動ダイアログを開く Alt + F4 「トレーディングアプリ」を閉じる Ctrl + Alt + C .</description></item><item><title>トレステ/関数/Momentum 関数 - 現在の足のモメンタムを求める</title><link>https://toushi.maku.blog/p/xrap6ky/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/xrap6ky/</guid><description>Momentum 関数の使い方 Momentum 関数は、現在の足のモメンタム（n 本前の足との価格差）を返します。 第1引数に使用する価格の種類 (OHLC)、第2引数に何本前の足と比べるかを指定します。
14 本前の終値との差分を求める Value1 = Momentum(Close, 14); Momentum 関数は単純に価格差を返しますが、比率（パーセンテージ）で求めるには次のように RateOfChange 関数を使用します。 RateOfChange が返す値は、価格に変化がないときは 0、価格が 50％ 上がっているときは 50 になります。
14 本前の終値からの変化率（騰落率％）を求める Value1 = RateOfChange(Close, 14); Momentum 関数の実装 Momentum 関数の実装はとてもシンプルです。
Momentum 関数の実装 inputs: Price(numericseries), Length(numericsimple); Momentum = Price - Price[Length]; RateOfChange 関数の実装は次のようになっています。
RateOfChange 関数の実装 inputs: Price(numericseries), Length(numericsimple) ; if Price[Length] &amp;lt;&amp;gt; 0 then RateOfChange = (Price / Price[Length] - 1) * 100 else RateOfChange = 0;</description></item><item><title>トレステのチャート分析の時間足（足種）をキーボードで切り替える</title><link>https://toushi.maku.blog/p/n8ju6gq/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/n8ju6gq/</guid><description>コマンド入力ボックスについて トレステ画面でおもむろにキーボードで入力を始めると、トレステ画面の上部に表示されている コマンド入力ボックス （「銘柄コード/コマンドを入力」と表示されているところ）にそのテキストが表示されます。 ここに特定のコマンドを入力して Enter キーを押すと、キーボードだけで各種ウィンドウの表示を切り替えることができます。
このメインツールバーが表示されていない場合は、メニューから次のようにたどって表示できます。
表示 → ツールバー → メイン ただ、コマンド入力自体は、このメインツールバーが表示されていなくても可能です。 メインツールバーが表示されていなときにコマンド入力を始めると、独立した「コマンドライン」ダイアログが表示されて、そこに入力したテキストが表示されます。
コマンド入力ボックスの右に表示されている矢印アイコンをクリックすると、過去に実行したコマンドの履歴からコマンドを実行することができます。
チャート分析ウィンドウの表示を切り替える 時間足（足種）の切り替え チャート分析ウィンドウをアクティブにした状態で、次のようにキーボードから入力して Enter キーを押すことで、時間足を簡単に切り替えることができます。 大文字と小文字は区別されません。
1 tick(s): 1 ティック足 10 tick(s): 10 ティック足 30 sec(s) / 30 second(s): 30 秒足 1 min(s) / 1 minute(s): 1 分足 5 min(s) / 5 minute(s): 5 分足 15 min(s) / 15 minute(s): 15 分足 60 min(s) / 60 minute(s): 1 時間足 240 min(s) / 240 minute(s): 4 時間足 .</description></item><item><title>TradeStation/インジケーター/モメンタム (WA-Momentum)</title><link>https://toushi.maku.blog/p/rbnx8hr/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/rbnx8hr/</guid><description>WA-Momentum { Search Tag: WA-Momentum } inputs: Price( Close ) [DisplayName = &amp;#34;Price&amp;#34;, ToolTip = &amp;#34;Enter an EasyLanguage expression to use in the momentum calculation.&amp;#34;], Length( 12 ) [DisplayName = &amp;#34;Length&amp;#34;, ToolTip = &amp;#34;Enter number of bars over which to calculate momentum.&amp;#34;], ColorNormLength( 14 ) [DisplayName = &amp;#34;ColorNormLength&amp;#34;, ToolTip = &amp;#34;Color Normalization Length. Enter the number of bars over which to determine high and low values of the indicator for use in creating gradient colors.</description></item><item><title>トレステのチャート分析ウィンドウを素早く最大化する</title><link>https://toushi.maku.blog/p/9py9hqz/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/9py9hqz/</guid><description>トレステのチャート分析ウィンドウは、
チャート領域の任意の部分を 右ダブルクリック することで素早く最大化することができます。 元に戻すときも同様です。
もちろん、タイトルバーのダブルクリックや、右上の最大化ボタンでも同じことができますが、上記の方法が最も素早く操作できると思います。</description></item><item><title>トレステ画面の操作</title><link>https://toushi.maku.blog/p/3nzakv6/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/3nzakv6/</guid><description/></item><item><title>TradeStation や EasyLanguage で使われる用語のメモ</title><link>https://toushi.maku.blog/p/spbgdm2/</link><pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/spbgdm2/</guid><description>トレードステーションの解説や、そのプログラミング言語である EasyLanguage の解説使われる用語の説明です。 投資の世界では「テクニカル指標」という言葉はよく使うけど、「分析テクニック」という表現は独特ですね。
銘柄 ＝ シンボル ＝ Symbol 複数のシンボルを集めたものを「シンボルリスト 」と呼びます。 足種 ＝ インターバル ＝ Interval 取引情報 &amp;hellip; 下記をまとめたもの 価格 出来高 時間 分析テクニック ＝ テクニカル指標 = 分析情報 「インジケーター」「ショウミー」「ペイントバー」「アクティビティバー」「プロバビリティマップ」などの総称。ストキャスティクスや移動平均など。 分析テクニックを集めたものを「分析グループ 」と呼びます。自分の好きな分析テクニックをカスタム分析グループとして保存しておけば、簡単にその分析画面を復元することができます。</description></item><item><title>EasyLanguage のストラテジーサンプル「移動平均のGC/DCによる売買」</title><link>https://toushi.maku.blog/p/5vds8n2/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/5vds8n2/</guid><description>2 本の移動平均線がクロスするタイミングで売買を行うストラテジです。 TradeStation には標準で付属しているストラテジとして、「単純移動平均2本クロス買いエントリー (ストラテジー)」がありますが、ここでは自力で実装する場合のサンプルとして示します。
ストラテジ概要 エントリタイミング 買いエントリ (Buy) の条件 短期移動平均線が長期移動平均線をゴールデンクロス (GC) 売りエントリ (SellShort) の条件 短期移動平均線が長期移動平均線をデッドクロス (DC) パラメータ fastLen: 短期移動平均の足数 slowLen: 長期移動平均の足数 ソースコード input: fastLen(5), slowLen(25); var: fastAvg(0), slowAvg(0); fastAvg = AverageFC(Close, fastLen); slowAvg = AverageFC(Close, slowLen); if fastAvg crosses over slowAvg then begin Buy next bar at market; end; if fastAvg crosses under slowAvg then begin SellShort next bar at market; end;</description></item><item><title>トレステの設定: シンボルリンクとインターバルリンクでウィンドウ間の表示を連携させる</title><link>https://toushi.maku.blog/p/yhr2aiq/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/yhr2aiq/</guid><description>ウィンドウリンクとは TradeStation の「ウィンドウリンク」の仕組みを使用すると、ウィンドウ間（トレーディングアプリ間）で選択している銘柄や、足のインターバル（分足や時間足）の設定を同期させることができます。 ウィンドウリンクの機能には、次の 2 種類があります。
シンボルリンク &amp;hellip; 銘柄をリンクして切り替える インターバルリンク（足種リンク） &amp;hellip; 足のインターバルをリンクして切り替える シンボルリンク シンボルリンクを有効にするには、各ウィンドウのタイトルバー右上に表示されている「S」マークをクリックし、ハイライトされた状態にします。
ここでは、「レーダースクリーン」と「チャート分析」のウィンドウのシンボルリンクを有効にしています。 レーダースクリーンの銘柄コードをクリックすると、チャート分析のウィンドウで表示している銘柄が連動して切り替わるようになります。
インターバルリンク（足種リンク） インターバルリンクを有効にするには、各ウィンドウのタイトルバー右上に表示されている「I」マークをクリックし、ハイライトされた状態にします（シンボルリンクのボタンの右にあります）。
インターバルリンクを複数のウィンドウで有効にしておくと、5分足や、1時間足などのインターバル設定を同期させることができます。
リンクカラーとグローバル設定 シンボルリンクやインターバルリンクのボタンの隅にあるプルダウンマークを押すと、下記のようにリンクの種類を選択することができます。
ここでは、リンクの色を設定することができ、等しい色を選択したウィンドウ同士でリンク機能が働くようになります。
また、ここで、グローバルリンクと記述されたものを選択すると、ワークスペースをまたがったウィンドウ間でもリンク機能が働くようになります（デフォルトはローカルリンクになっています）。 ローカルリンクとグローバルリンクはボタンの形が若干違うので、タイトルバーを見るだけで現在どちらが設定されているかを判別できます。
上のボタンがローカルリンク時の形状で、下のボタンがグローバルリンク時の形状です。</description></item><item><title>トレステの設定</title><link>https://toushi.maku.blog/p/tdpybkv/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/tdpybkv/</guid><description/></item><item><title>トレステの設定: レーダースクリーンのフォントサイズを変更する</title><link>https://toushi.maku.blog/p/zhry9hq/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/zhry9hq/</guid><description>TradeStation のレーダースクリーンのフォント設定は、下記の場所から変更することができます。
レーダースクリーンのウィンドウを選択した状態にする メニューから 設定 → ページ と選択する 「ページの設定」ダイアログから フォント タブを開く フォントサイズを小さめに設定しておくと、レーダースクリーンの一覧性が増します。</description></item><item><title>TradeStation/インジケーター/移動平均線1本 (WA-Mov Avg 1 Line)</title><link>https://toushi.maku.blog/p/kkipwgp/</link><pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/kkipwgp/</guid><description>WA-Mov Avg 1 Line { Search Tag: WA-Mov Avg 1 Line } inputs: Price( Close ) [DisplayName = &amp;#34;Price&amp;#34;, ToolTip = &amp;#34;Enter an EasyLanguage expression to use in the moving average calculation.&amp;#34;], Length( 9 ) [DisplayName = &amp;#34;Length&amp;#34;, ToolTip = &amp;#34;Enter number of bars over which to calculate the simple moving average.&amp;#34;], Displace( 0 ) [DisplayName = &amp;#34;Displace&amp;#34;, ToolTip = &amp;#34;Displacement. Enter the number of bars by which plots will be displaced.</description></item><item><title>トレステ EashLanguage 入門</title><link>https://toushi.maku.blog/p/peu9myd/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/peu9myd/</guid><description/></item><item><title>TradeStation の標準インジケーターのコード</title><link>https://toushi.maku.blog/p/hprjx9i/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/hprjx9i/</guid><description>Easy Language の学習用に、Trade Station の標準インジケーターのコードをまとめておきます。</description></item></channel></rss>