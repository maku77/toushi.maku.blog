<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MetaTrader/MQL: 注文を出す on まくまく投資ノート</title><link>https://toushi.maku.blog/p/qboyakv/</link><description>Recent content in MetaTrader/MQL: 注文を出す on まくまく投資ノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 02 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://toushi.maku.blog/p/qboyakv/index.xml" rel="self" type="application/rss+xml"/><item><title>MetaTrader/MQL: CTrade クラスで注文を出す (MT5)</title><link>https://toushi.maku.blog/p/bw6tgck/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/bw6tgck/</guid><description>MQL で注文を出すときは、クラスベースの CTrade や、関数ベースの OrderSend を使用します。 ここでは、CTrade クラスを使って注文を出す方法を説明します。 OrderSend 関数と違い、CTrade クラスは注文の種類ごとにメソッド名が Buy、Sell、BuyLimit のように分かれている ので、わかりやすいコードを記述することができます。
CTrade クラスのインクルード トレード用クラス のひとつである CTrade クラス を使用すると、取引のための注文を出したり、注文をキャンセルしたりできます。 Ctrade クラスを使用するには、次のように Trade/Trade.mql ヘッダファイルをインクルードする必要があります。
#include &amp;lt;Trade/Trade.mqh&amp;gt; CTrade trade; // CTrade インスタンスの生成 成行注文を出す (CTrade.Buy, Sell) カレントシンボルの成行注文 CTrade.Buy メソッド で 成行の買い 注文を出すことができます。 第 1 引数 (volume) だけが必須で、ここで取引のロット数（0.1 なら 1万通貨）を指定します。 許容するスリッページ（ポイント数）は、CTrade.SetDeviationInPoints メソッド で指定できます。
次のスクリプトを実行すると、現在のシンボルを 0.1 ロット購入します。
Scripts/Buy.mq5（成行買いのスクリプト実装例） #include &amp;lt;Trade/Trade.mqh&amp;gt; // CTrade const double LOT = 0.1; // 取引するロット数（ボリューム） 0.1 = 1万通貨 /** スクリプトのエントリポイント */ void OnStart() { CTrade trade; trade.</description></item><item><title>MetaTrader/MQL: OrderSend で成行注文を出す (MT5)</title><link>https://toushi.maku.blog/p/iz8gpw6/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/iz8gpw6/</guid><description>成行注文時の OrderSend 関数の使い方 MT5 で売買注文を出すには、OrderSend 関数（日本語） を使用します。 OrderSend 関数は様々な注文で使用されるため、成行注文を行うには、それ用に設定した MqlTradeRequest オブジェクトを引数で渡してやる必要があります。
bool OrderSend(MqlTradeRequest&amp;amp; request, MqlTradeResult&amp;amp; result) まず、ブローカーが設定している 注文執行方式 によって指定すべき値が変わってくるので、対象銘柄がどの注文執行方式で取引されるかを把握しておいてください（→ FX 会社の注文執行方式について）。
簡単に言えば、次の注文執行方式であれば価格とスリッページ (deviation) の指定が必要で、
Instant Execution（成行方式、ストリーミング方式） Request Execution（リクエスト方式） 次の注文執行方式であれば価格とスリッページの指定は必要ありません（取引価格は時価で決まる）。
Market Execution（カウントダウン方式、マーケット方式） Exchange Execution（エクスチェンジ方式） それぞれの注文執行方式において、MqlTradeRequest オブジェクトのどのフィールドが必須かは MqlTradeRequest 構造体のドキュメント（日本語）に説明があります。 ただ、公式ドキュメントはとても分かりにくいので下記表でまとめておきます。
引数 Instant / Request Execution Market / Exchange Execution action TRADE_ACTION_DEAL TRADE_ACTION_DEAL magic ほぼ必須 ほぼ必須 symbol 必須 必須 volume 必須 必須 type 必須 必須 type_filling 必須 必須 price 必須 ─ deviation 必須 ─ sl オプショナル オプショナル tp オプショナル オプショナル comment オプショナル オプショナル 表: 成行注文で必要な MqlTradeRequest のフィールド 一見難しそうですが、要するに約定させる価格 (price / deviation) をユーザーが指定すべきかどうかだけの違いです。 どの注文執行方式でも動作するように OrderSend 関数を呼び出すには、常に price 引数と deviation 引数を指定するようにすればよいでしょう（Market Execution および Exchange Execution では無視されます）。</description></item><item><title>MetaTrader/MQL: OrderSend で決済注文を出す（ポジションのクローズ）(MT5)</title><link>https://toushi.maku.blog/p/wb8rxic/</link><pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/wb8rxic/</guid><description>ポジションのクローズは反対売買 MT5 においてポジションのクローズ（決済）を行うには、OrderSend で逆方向のポジションを追加する注文を行います。 つまり、現在のポジションと相殺するように買い注文 or 売り注文を出します。
現在の口座が、両建て可能な「ヘッジアカウント」の場合、反対注文を出すときは、対象のポジションを特定するためのチケット番号 (MqlTradeRequest.position) を指定しなければいけないことに注意してください。 「ネットアカウント」を使用している場合は、シンボル（銘柄）だけを指定すれば OK です（ポジションのチケット番号を指定しても無視されます）。
参考: ヘッジアカウントとネットアカウントの違いを理解する ネットアカウントにおけるポジションクローズ ネットアカウントにおいて既存のポジションをクローズするには、シンボル名を指定して OrderSend で成行注文 (action == TRADE_ACTION_DEAL) あるいは、指値注文 (action == TRADE_ACTION_PENDING) を入れます。 成行注文でも指値注文でも決済タイミングが異なるだけで同様です。
あるシンボルのポジションをすべて閉じるには、反対方向に同じボリュームだけ売買注文を入れる必要があります。 そのため、まずは現在のポジションの量を調べます。
/** * ネットアカウントにおいて、指定したシンボルのポジション情報を取得します。 * ヘッジアカウントで使用すると、最初に見つかったポジションの情報を返します。 * * @param volume[out] 保有ポジションのロット数 * @param posType[out] 保有ポジションの売買方向 * (POSITION_TYPE_SELL or POSITION_TYPE_BUY) * @param symbol[in] 取得対象のシンボル（省略時はカレントシンボル） * @return ポジションが見つかった場合: true、ノーポジの場合: false */ bool getOpenPosition_InNetAccount( double &amp;amp;volume, ENUM_POSITION_TYPE &amp;amp;posType, string symbol = NULL ) { if (symbol == NULL) symbol = Symbol(); if (!</description></item><item><title>MetaTrader/MQL: OrderSend の引数を理解する - MqlTradeRequest/MqlTradeResult 構造体 (MT5)</title><link>https://toushi.maku.blog/p/j6iu7hs/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/j6iu7hs/</guid><description>MT5 の OrderSend 関数 MT5 で注文を出すには OrderSend 関数（日本語）を使用します。
MT5 の OrderSend 関数 bool OrderSend( MqlTradeRequest&amp;amp; request, // 注文内容を指定する MqlTradeResult&amp;amp; result // 注文結果が格納される ) ここでは、注文結果が格納される MqlTradeResult 構造体（日本語）と、注文結果が格納される MqlTradeResult 構造体（日本語）について説明します。
MqlTradeRequest 構造体（注文内容を指定する） MqlTraderRequest 構造体には次のようなフィールドが定義されています。 各フィールドにどのような値を設定すべきかを順に説明していきます。
MqlTradeRequest 構造体 struct MqlTradeRequest { ENUM_TRADE_REQUEST_ACTIONS action; // アクション（取引タイプ） ulong magic; // EA のマジックナンバー ulong order; // オーダーのチケット番号（待機注文を操作する場合） string symbol; // シンボル名 double volume; // ロット数 double price; // 価格 double stoplimit; // ストップ・リミット注文発火時に使われる指値価格 double sl; // 利確の価格 double tp; // 損切の価格 ulong deviation; // 最大許容スリッページ（ポイント） ENUM_ORDER_TYPE type; // 売買のタイプ ENUM_ORDER_TYPE_FILLING type_filling; // フィル・タイプ ENUM_ORDER_TYPE_TIME type_time; // 有効期限タイプ datetime expiration; // 有効期限 string comment; // 注文コメント ulong position; // ポジションのチケット番号（ポジションを操作する場合） ulong position_by; // 反対ポジションのチケット番号（ポジション相殺用） }; ENUM_TRADE_REQUEST_ACTIONS action（必須） ENUM_TRADE_REQUEST_ACTIONS 列挙値 でアクション（取引タイプ）を指定します。 つまり、この OrderSend 関数を何のために使用するかを示します。 この値によって、残りのパラメータに何を設定すべきかがガラリと変わってきます。</description></item><item><title>MetaTrader/MQL: OrderSend で注文を出す (MT4)</title><link>https://toushi.maku.blog/p/oanyb2a/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/oanyb2a/</guid><description>MT4 で指定したシンボル（USDJPY などの通貨ペア）に対して、成行注文や指値注文を出すには OrderSend 関数 を使用します。 MT4 バージョンと、MT5 バージョンでは関数のパラメータや戻り値が異なるので注意してください。 多くの環境では、まだ MT4 が使われているので、ここでは MT4 バージョンの OrderSend 関数の使い方を説明します。
OrderSend 関数 (MT4) の使い方 OrderSend 関数 (MQL4) int OrderSend( string symbol, // symbol int cmd, // operation double volume, // volume double price, // price int slippage, // slippage double stoploss, // stop loss double takeprofit, // take profit string comment=NULL, // comment int magic=0, // magic number datetime expiration=0, // pending order expiration color arrow_color=clrNONE // color ) OrderSend のパラメーター symbol &amp;hellip; 注文する通貨ペアのシンボル名。例えば、&amp;quot;USDJPY&amp;quot; などを指定します。選択中のチャートのシンボルを使いたい場合は、Symbol() を指定すれば OK です。 cmd &amp;hellip; 注文の種類 (Order Properties) を指定します。 OP_BUY &amp;hellip; 成行買い OP_SELL &amp;hellip; 成行売り OP_BUYLIMIT &amp;hellip; 指値買い（今より安くなったら買う） OP_SELLLIMIT &amp;hellip; 指値売り（今より高くなったら売る） OP_BUYSTOP &amp;hellip; 逆指値買い（今より高くなったら買う） OP_SELLSTOP &amp;hellip; 逆指値売り（今より安くなったら売る） volume &amp;hellip; ロット数。多くの場合 0.</description></item></channel></rss>