<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MetaTrader/MQL: カスタムインジケーター on まくまく投資ノート</title><link>https://toushi.maku.blog/p/br2airy/</link><description>Recent content in MetaTrader/MQL: カスタムインジケーター on まくまく投資ノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sun, 18 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://toushi.maku.blog/p/br2airy/index.xml" rel="self" type="application/rss+xml"/><item><title>MetaTrader/MQL: カスタムインジケーターを作成する</title><link>https://toushi.maku.blog/p/5q5gs5g/</link><pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/5q5gs5g/</guid><description>カスタムインジケータの作成 ここでは、最初のステップとして、ローソク足の終値をラインで結ぶだけのカスタムインジケータを作成してみます。 Meta Editor 上で Control + N を押して、Custom Indicator を選択すると、カスタムインジケータのファイルを新規作成することができます。
下記は、終値を結ぶラインを引く簡単なインジケーターの実装例です。
MyIndicator.mt4 #property strict #property indicator_chart_window #property indicator_buffers 1 #property indicator_plots 1 // Default properties for Line 1 #property indicator_label1 &amp;#34;Line 1&amp;#34; #property indicator_type1 DRAW_LINE #property indicator_color1 clrRed #property indicator_style1 STYLE_SOLID #property indicator_width1 1 // Buffer for indicator line double gBuffer[]; int OnInit() { SetIndexBuffer(0, gBuffer, INDICATOR_DATA); return INIT_SUCCEEDED; } int OnCalculate( const int rates_total, // ローソク足の数 const int prev_calculated, // 前回の OnCalculate() の戻り値 const datetime &amp;amp;time[], // ローソク足ごとの時刻 [0.</description></item><item><title>MetaTrader/MQL: カスタムインジケーターに水平線を表示する (IndicatorSet*)</title><link>https://toushi.maku.blog/p/fsy7djp/</link><pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/fsy7djp/</guid><description>IndicatorSetXxx() 系の関数を使用して、インジケーターに水平線を表示することができます。 下記の例では、0.1 と -0.1 の値の位置に水平線を表示しています（0.0 の位置には、デフォルトで水平線が表示されるようです）。
void InitLevelLines() { // The number of horizontal lines. IndicatorSetInteger(INDICATOR_LEVELS, 2); // First line settings. IndicatorSetString(INDICATOR_LEVELTEXT, 0, &amp;#34;Upper line&amp;#34;); IndicatorSetDouble(INDICATOR_LEVELVALUE, 0, 0.1); IndicatorSetInteger(INDICATOR_LEVELSTYLE, 0, STYLE_DASHDOT); IndicatorSetInteger(INDICATOR_LEVELCOLOR, 0, clrPink); IndicatorSetInteger(INDICATOR_LEVELWIDTH, 0, 1); // Second line settings. IndicatorSetString(INDICATOR_LEVELTEXT, 1, &amp;#34;Lower line&amp;#34;); IndicatorSetDouble(INDICATOR_LEVELVALUE, 1, -0.1); IndicatorSetInteger(INDICATOR_LEVELSTYLE, 1, STYLE_DASHDOT); IndicatorSetInteger(INDICATOR_LEVELCOLOR, 1, clrPink); IndicatorSetInteger(INDICATOR_LEVELWIDTH, 1, 1); } int OnInit() { // ... InitLevelLines(); // ... return INIT_SUCCEEDED; }</description></item><item><title>MetaTrader/MQL: カスタムインジケーターで使用できるイベント</title><link>https://toushi.maku.blog/p/ugs5fq2/</link><pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/ugs5fq2/</guid><description>カスタムインジケーターのプログラム内で、決まったシグネチャ（関数名やパラメーター構成）で関数を定義しておくと、特定のイベント発生時に自動的にその関数を呼び出してくれるようになります。
参考リンク アプリの種類ごとに扱えるイベントハンドラーの一覧 EA で使用できるイベント スクリプトで使用できるイベント カスタムインジケーターでは次のようなイベントハンドラーを定義することができます。
OnInit 関数 int OnInit(void); インジケーターの OnInit() 関数は、Init イベントが発生したときに呼び出されます。 Init イベントは次のようなタイミングで発生します。
インジケーターが最初にチャートにアタッチされたとき チャートのシンボル（USDJPY など）やタイムフレーム（時間足）が変更されたとき MetaEditor 上でインジケーターが再コンパイルされたとき インジケーターの入力パラメータがダイアログから変更されたとき このハンドラー関数内では、描画用バッファーの初期化などを行います。 戻り値が void のバージョンもありますが、互換性のために残されているだけなので、int を返すバージョンを使ってください。
OnDeinit 関数 void OnDeinit(const int reason); インジケーターの OnDeinit 関数は、次のようなタイミングで呼び出されます（参考: Uninitialization Reason Codes）。 パラメータ部分の const を省略して int reason と記述したりすると、ちゃんと呼び出されないので注意してください。
説明 定数 チャートからインジケーターをデタッチしたとき REASON_REMOVE (1) MetaEditor 上でインジケーターが再コンパイルされたとき REASON_RECOMPILE (2) チャートのシンボル（USDJPY など）やタイムフレーム（時間足）が変更されたとき REASON_CHARTCHANGE (3) チャートを閉じたとき REASON_CHARTCLOSE (4) インジケーターの入力パラメータがダイアログから変更されたとき REASON_PARAMETERS (5) 別のアカウントで接続されたとき REASON_ACCOUNT (6) テンプレートが適用されて、インジケーターが設定されたチャートが開くとき REASON_TEMPLATE (7) OnInit() 処理が失敗して 0 以外の値を返したとき REASON_INITFAILED (8) ターミナル (MetaTrader) を閉じたとき REASON_CLOSE (9) OnCalculate 関数 int OnCalculate( const int rates_total, // price[] array size const int prev_calculated, // number of handled bars at the previous call const int begin, // index number in the price[] array meaningful data starts from const double&amp;amp; price[] // array of values for calculation ); int OnCalculate( const int rates_total, // size of input time series const int prev_calculated, // bars handled in previous call const datetime&amp;amp; time[], // Time const double&amp;amp; open[], // Open const double&amp;amp; high[], // High const double&amp;amp; low[], // Low const double&amp;amp; close[], // Close const long&amp;amp; tick_volume[], // Tick Volume const long&amp;amp; volume[], // Real Volume const int&amp;amp; spread[] // Spread ); インジケーターの OnCalculate() 関数は、Calculate イベントが発生したとき（最新の価格が変化したとき）に呼び出されます。 インジケーターを最初にチャートにアタッチしたときにも呼び出されます。</description></item><item><title>MetaTrader/MQL: インジケーターの実装例 - 大きなシンボル名を表示する</title><link>https://toushi.maku.blog/p/mbewc25/</link><pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/mbewc25/</guid><description>図: LargeSymbol インジケーター 下記の LargeSymbol インジケーターをチャートに適用すると、チャートの左上に大きな文字で通貨ペアと、タイムフレーム（時間足）を表示します（コードリポジトリはこちら）。
Indicators/maku/LargeSymbol.mq5 /* * LargeSymbol indicator. * * This indicator displays large symbol name and timeframe * on the top-left corner of the current chart. */ #property copyright &amp;#34;maku77&amp;#34; #property link &amp;#34;https://toushi.maku.blog/&amp;#34; #property version &amp;#34;1.00&amp;#34; #property strict #property indicator_chart_window #property indicator_plots 0 // Surpress &amp;#34;no indicator plot&amp;#34; warning #include &amp;lt;maku77/ErrorUtil.mqh&amp;gt; #include &amp;lt;ChartObjects/ChartObjectsTxtControls.mqh&amp;gt; input color gForegroundColor = clrBlack; // Foreground color input color gBackgroundColor = clrWhite; // Background color CChartObjectLabel gLabel; CChartObjectRectLabel gRect; // Hide Open/High/Low/Close price indicator void HideOhlc() { ::ChartSetInteger(0, CHART_SHOW_OHLC, false); } string RandomObjectName() { return &amp;#34;Object-&amp;#34; + IntegerToString(MathRand()); } string GetPeriodText() { switch (Period()) { case PERIOD_D1: return &amp;#34;D1&amp;#34;; case PERIOD_H1: return &amp;#34;H1&amp;#34;; case PERIOD_H4: return &amp;#34;H4&amp;#34;; case PERIOD_M1: return &amp;#34;M1&amp;#34;; case PERIOD_M5: return &amp;#34;M5&amp;#34;; case PERIOD_M15: return &amp;#34;M15&amp;#34;; case PERIOD_M30: return &amp;#34;M30&amp;#34;; case PERIOD_MN1: return &amp;#34;MN1&amp;#34;; case PERIOD_W1: return &amp;#34;W1&amp;#34;; } return &amp;#34;?</description></item><item><title>MetaTrader/MQL: インジケーターの実装例 - アカウント（口座）情報を表示する</title><link>https://toushi.maku.blog/p/tsig7ew/</link><pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/tsig7ew/</guid><description> 図: AccountInfo インジケーター 下記の AccountInfo インジケータを使用すると、チャート上に口座情報（証拠金情報）を表示することができます。
Indicators/maku/AccountInfo.mq5 それぞれの表示は下記のような意味を持っています。
Balance: 証拠金残高 Profit: 損益 Equity: 純資産（証拠金残高 - 損益） Margin level: 証拠金維持率 Margin: 必要証拠金 Free margin: 有効証拠金 こういった口座情報は、AccountInfo* 系の API で取得することができます。 詳しくは下記を参照してください。
MetaTrader/MQL: アカウント情報（口座情報）を取得する (AccountInfo*) (MT5)</description></item><item><title>MetaTrader/MQL: インジケーターの実装例 - Momentum（モメンタム）</title><link>https://toushi.maku.blog/p/3emsz6c/</link><pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/3emsz6c/</guid><description>モメンタムは下記の計算式で求められます。
モメンタム = 現在の価格 - X日前の価格 ある一定期間前の価格と比べ、現在の価格がどれだけ上下しているかを示すため、相場の勢いを知るために使用されます。 どれくらい前の価格と比較するかは、一般的に下記のような値が使用されます。
日足の場合 &amp;hellip; 10日、25日 週足の場合 &amp;hellip; 9週、13週、26週 月足の場合 &amp;hellip; 3ヶ月、6ヶ月、9ヶ月 モメンタムは価格の差分を表すため、通常は下記のように別ウィンドウに表示します。
Momentum.mq5 #property copyright &amp;#34;Maku&amp;#34; #property version &amp;#34;1.00&amp;#34; // Global settings #property description &amp;#34;Momentum&amp;#34; #property strict #property indicator_separate_window #property indicator_buffers 1 #property indicator_plots 1 // Indicator settings #property indicator_type1 DRAW_LINE #property indicator_color1 clrCyan #property indicator_style1 STYLE_SOLID #property indicator_width1 1 // Input parameters input int gPeriod = 25; // Momentum Period // Indicator bufferes double gMomentumBuffer[]; // Initialize the indicator.</description></item><item><title>MetaTrader/MQL: インジケーターの実装例 - WMA（加重移動平均）</title><link>https://toushi.maku.blog/p/f2eq2dp/</link><pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/f2eq2dp/</guid><description>WMA: Weighted Moving Average（加重移動平均線）は、直前の価格ほど重みをおいた移動平均線です。 考え方は EMA（指数平滑移動平均線）に近いのですが、WMA の方が計算はシンプルです。 例えば、5 WMA は以下のように求められます。
下記の値を合計する 1 つ前の値 x 5 2 つ前の値 x 4 3 つ前の値 x 3 4 つ前の値 x 2 5 つ前の値 x 1 これを 15 (1+2+3+4+5) で割る MyWma.mq5 #property copyright &amp;#34;Maku&amp;#34; #property link &amp;#34;http://www.mql5.com&amp;#34; #property version &amp;#34;1.00&amp;#34; #property strict // Chart settings #property indicator_chart_window #property indicator_buffers 1 #property indicator_plots 1 // Each indicator settings #property indicator_type1 DRAW_LINE #property indicator_style1 STYLE_SOLID #property indicator_width1 1 #property indicator_color1 clrPink // Input parameters input int gPeriod = 25; // Period of WMA // Indicator buffers double gWmaBuffer[]; /** * [Utility] * How many candles should be re-calculated.</description></item><item><title>MetaTrader/MQL: インジケーターの実装例 - SMA（単純移動平均）</title><link>https://toushi.maku.blog/p/h3fr3do/</link><pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/h3fr3do/</guid><description>移動平均線のカスタムインジケータを作成する 単純移動平均線 (SMA: Simple Moving Average) を表示するためのインジケータはデフォルトで用意されていますが、ここでは勉強のためにインジケータを自作してみます。
MySma.mq5 #property description &amp;#34;My Moving Average&amp;#34; #property strict #property indicator_chart_window #property indicator_buffers 1 #property indicator_plots 1 // Indicator settings #property indicator_label1 &amp;#34;MA&amp;#34; #property indicator_type1 DRAW_LINE #property indicator_color1 clrRed #property indicator_style1 STYLE_SOLID #property indicator_width1 1 // Input parameters input int gPeriod = 7; // MA Period // Indicator buffers double gMaBuffer[]; int OnInit() { if (gPeriod &amp;lt;= 0) { Alert(&amp;#34;Period must be larger than 0&amp;#34;); return INIT_PARAMETERS_INCORRECT; } SetIndexBuffer(0, gMaBuffer); IndicatorShortName(&amp;#34;MA(&amp;#34; + gPeriod + &amp;#34;)&amp;#34;); return INIT_SUCCEEDED; } /** * [Utility] * How many candles should be re-calculated.</description></item></channel></rss>