<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MetaTrader/MQL: チャートを操作する on まくまく投資ノート</title><link>https://toushi.maku.blog/p/g3fr3ep/</link><description>Recent content in MetaTrader/MQL: チャートを操作する on まくまく投資ノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 13 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://toushi.maku.blog/p/g3fr3ep/index.xml" rel="self" type="application/rss+xml"/><item><title>MetaTrader/MQL: 描画オブジェクトの基本 (ObjectCreate, ObjectDelete, ObjectSetXxx)</title><link>https://toushi.maku.blog/p/du6env6/</link><pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/du6env6/</guid><description>描画オブジェクトの作成 (ObjectCreate) MetaTrader のチャート上に何らかの図形を描画するには、ObjectCreate 関数（日本語）を使って、描画オブジェクトを生成します。
ObjectCreate 関数 bool ObjectCreate( long chart_id, // チャート ID（0 ならカレントチャート） string name, // オブジェクト名 ENUM_OBJECT type, // オブジェクトの種類 int sub_window, // サブウィンドウ番号（0 ならメインウィンドウ） datetime time1, // 1 番目のアンカーポイントの時刻 double price1, // 1 番目のアンカーポイントの価格 ... // : datetime time30=0, // 30番目のアンカーポイントの時刻 double price30=0 // 30番目のアンカーポイントの価格 ); chart_id / sub_window chart_id 引数と sub_window 引数には、どのチャートの、どのウィンドウに描画オブジェクトを表示するかを指定します。 カレントチャートのメインウィンドウに表示するのであれば、両方とも 0 を指定しておけば OK です。
name name 引数では、作成する描画オブジェクトに名前を付けます。 描画オブジェクトの各種プロパティを設定するときは、この名前で描画オブジェクトを指定することになります。 名前はチャート内（サブウィンドウを含む）で一意でなければいけません。 ただし、使用上 63 文字までしか使えないので、その範囲で他のインジケーターとできるだけ被らない名前を付ける必要があります。</description></item><item><title>MetaTrader/MQL: チャート上にラベルを描画する (OBJ_LABEL, CChartObjectLabel)</title><link>https://toushi.maku.blog/p/h4fq2cm/</link><pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/h4fq2cm/</guid><description>ラベルオブジェクトについて 図: チャート上のラベル表示 ラベルオブジェクト (OBJ_LABEL) は、MetaTrader のチャート上に表示できる描画オブジェクトのひとつです。 ラベルオブジェクトの表示位置は、ウィンドウ上の左上を起点 (CORNER_LEFT_UPPER) として XY 座標が指定されるため、チャートを時間軸方向に移動させても、ラベルの表示位置は固定されて動きません（一方で、テキストオブジェクト (OBJ_TEXT) の場合は、表示位置が時間 (time) と価格 (price) で指定されるため、チャートの時間軸を移動させると同時に移動します）。
ラベルオブジェクトの作成 ラベルオブジェクトを作成するには、組み込み関数である ObjectCreate の type パラメータに OBJ_LABEL を指定します（ObjectCreate の詳しい使い方はこちら）。
bool ObjectCreate( long chart_id, // チャート識別子（0 はカレントチャート） string name, // オブジェクト名（ラベルの識別子） ENUM_OBJECT type, // オブジェクトの型（OBJ_LABEL を指定） int sub_window, // ウィンドウインデックス（0 はメインウィンドウ） datetime time1, // 1 番目のアンカーポイントの時間（ラベルの場合は使用しない） double price1, // 1 番目のアンカーポイントの価格（ラベルの場合は使用しない） // ...残りは省略可... ) 例えば、カレントチャート (chart_id=0) の、メインウィンドウ (sub_window=0) に表示するためのラベルオブジェクトを作成するには下記のようにします。
if (!::ObjectCreate(0, &amp;#34;Label1&amp;#34;, OBJ_LABEL, 0, 0, 0)) { // ラベルオブジェクトの作成に失敗 } ラベルオブジェクトは、チャート上に複数追加することができますが、これらのラベルは、チャート ID（chart_id パラメータ）と、オブジェクト名 (name) で識別することになります。 現在アクティブになっているチャートにラベルを追加するのであれば、chart_id は 0 に設定します。 オブジェクト名はチャートの中で一意 になるような名前を付けます。 すでに同じ名前のオブジェクトが存在する場合は、ObjectCreate は失敗します。</description></item><item><title>MetaTrader/MQL: チャート上に矩形を描画する (OBJ_RECTANGLE, CChartObjectRectangle)</title><link>https://toushi.maku.blog/p/qju4dmu/</link><pubDate>Mon, 21 Mar 2016 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/qju4dmu/</guid><description>矩形オブジェクトについて 矩形オブジェクト (OBJ_RECTANGLE) および、矩形ラベルオブジェクト (OBJ_RECTANGLE_LABEL) は、MetaTrader のチャート上に表示できる描画オブジェクトです。 表示位置の指定方法によって、下記のように使い分けます。
矩形オブジェクト (OBJ_RECTANGLE) 矩形の表示位置が、チャートの時間軸 (time) および、価格 (price) に基づいて指定されます。チャートの時間軸を移動させると、それに合わせて矩形の表示位置も移動します。 矩形ラベルオブジェクト (OBJ_RECTANGLE_LABEL) 矩形の表示位置は、ウィンドウ上の左上を起点として XY 座標が指定されるため（CORNER_LEFT_UPPER を指定した場合）、チャートを時間軸方向に移動させても、ラベルの表示位置は固定されて動きません。 矩形オブジェクト（矩形ラベルオブジェクト）の作成 矩形オブジェクト（矩形ラベルオブエジェクト）を作成するには、組み込み関数である ObjectCreate の type パラメータに OBJ_RECTANGLE、あるいは OBJ_RECTANGLE_LABEL を指定します。
bool ObjectCreate( long chart_id, // チャート識別子（0 はカレントチャート） string name, // オブジェクト名 (ラベルの識別子） ENUM_OBJECT type, // オブジェクトの型（OBJ_LABEL を指定） int sub_window, // ウィンドウインデックス（0 はメインウィンドウ） datetime time1, // 1 番目のアンカーポイントの時間（ラベルの場合は使用しない） double price1, // 1 番目のアンカーポイントの価格（ラベルの場合は使用しない） // ...残りは省略可... ) 例えば、カレントチャート (chart_id=0) の、メインウィンドウ (sub_window=0) に表示するための矩形ラベルオブジェクトを作成するには下記のようにします。</description></item><item><title>MetaTrader/MQL: チャート上でのキーハンドリング (OnChartEvent)</title><link>https://toushi.maku.blog/p/c5z4ka3/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/c5z4ka3/</guid><description>EA の OnChartEvent 関数でチャートイベントをハンドルすると、チャート上でのキーボード入力を取得することができます。 これを利用すると、自作の EA にキーボードショートカット（ホットキー）機能を付けることができます。 例えば、数字の 1 キーを押したときに、0.1 ロットの買い成行注文を出す、といったことができます。
キー入力時は、OnChartEvent 関数の id パラメータの値は CHARTEVENT_KEYDOWN になり、lparam パラメータにキーコードが格納されます。 下記のサンプル EA をチャートにアタッチすると、入力したキー情報がチャート上に表示されるようになります。
Experts/MyEa.mq5 int OnInit() { return INIT_SUCCEEDED; } void OnChartEvent(const int id, const long &amp;amp;lparam, const double &amp;amp;dparam, const string &amp;amp;sparam) { if (id == CHARTEVENT_KEYDOWN) { string key; if (&amp;#39;0&amp;#39; &amp;lt;= lparam &amp;amp;&amp;amp; lparam &amp;lt;= &amp;#39;z&amp;#39;) { key = StringFormat(&amp;#34;key=%c(%d)&amp;#34;, lparam, lparam); } else { key = StringFormat(&amp;#34;key=%d&amp;#34;, lparam); } Comment(&amp;#34;CHARTEVENT_KEYDOWN: &amp;#34;, key); } } 特定のキー（例えば数字の 1 キー）が押されたときに、ユーザーに確認を求めてから処理を行いたい場合は次のようにします。</description></item><item><title>MetaTrader/MQL: 表示しているチャートを列挙する (ChartFirst, ChartNext)</title><link>https://toushi.maku.blog/p/244ung6/</link><pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/244ung6/</guid><description>MQL の下記の関数を使用すると、現在表示しているチャートの情報を列挙することができます。
ChartFirst 関数 &amp;hellip; 最初のチャート ID を取得します（見つからない場合は -1）。 ChartNext 関数 &amp;hellip; 次のチャートのチャート ID を取得します（見つからない場合は -1）。 具体的には、ChartFirst 関数で最初のチャートの ID を取得し、ChartNext 関数でその次のチャートの ID を繰り返し取得していく、という感じで処理できます。 処理するチャートがなくなったときは、上記の関数は -1 を返すので、正の値を返す間だけ繰り返し処理すれば OK です。
次のサンプルスクリプトでは、現在表示しているすべてのチャートの情報（チャートID、シンボル名、時間足）を列挙しています。
Scripts/Sample.mq5 void showChartInfo(long chartId) { string sym = ChartSymbol(chartId); ENUM_TIMEFRAMES period = ChartPeriod(chartId); PrintFormat(&amp;#34;%I64d: %s (%s)&amp;#34;, chartId, sym, EnumToString(period)); } void OnStart() { for (long id = ChartFirst(); id &amp;gt;= 0; id = ChartNext(id)) { showChartInfo(id); } } 実行結果 128968169024912109: USDJPY (PERIOD_M5) 128968169024912110: EURJPY (PERIOD_H1) 128968169024912111: EURUSD (PERIOD_D1) MQL5 の標準ライブラリとして提供されている CChart クラス を使っても同様のことを行えます。</description></item><item><title>MetaTrader/MQL: チャートのサイズ（幅・高さ）を取得する (ChartGetInteger)</title><link>https://toushi.maku.blog/p/xhxumiu/</link><pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/xhxumiu/</guid><description>ChartGetInteger 関数 の第 2 パラメーター (prop_id) に CHART_WIDTH_IN_PIXELS および CHART_HEIGHT_IN_PIXELS を指定することで、指定したチャートの幅・高さを取得することができます。 取得されるサイズは、チャートの描画領域のみのサイズです（軸の価格表示部分などは含まれません）。
ChartGetInteger() には次のような 2 つのバージョンがあります。 2 つ目のバージョンを使うと、戻り値で関数の実行に成功したかどうかを調べることができます。
long ChartGetInteger( long chart_id, // 対象のチャート（0 はカレントチャート） int prop_id, // 取得したいプロパティの ID int sub_window=0 // サブウィンドウ番号（0 はメインチャート） ) bool ChartGetInteger( long chart_id, // 対象のチャート（0 はカレントチャート） int prop_id, // 取得したいプロパティの ID int sub_window, // サブウィンドウ番号（0 はメインチャート） long&amp;amp; long_var // 取得結果の格納先 ) インジケーター用のサブウィンドウのサイズを調べたい場合は、第 3 パラメーター sub_window に 1, 2, 3 のような数値を指定します（1 がひとつめのサブチャートです）。
Scripts/MyScript.mq5 void OnStart() { long width = ChartGetInteger(0, CHART_WIDTH_IN_PIXELS); long height = ChartGetInteger(0, CHART_HEIGHT_IN_PIXELS); MessageBox(StringFormat(&amp;#34;width=%d, height=%d&amp;#34;, width, height)); } 下記はエラー処理なども行う例です（MT4用）。</description></item><item><title>MetaTrader/MQL: チャートの描画スタイルを設定する (ChartSetXxx)</title><link>https://toushi.maku.blog/p/dzcoybn/</link><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/dzcoybn/</guid><description>チャートのプロパティを設定／取得する あるチャートに設定されたプロパティ（描画スタイルなど）を変更／取得するには、次のような関数を使用します。
ChartSetInteger 関数 / ChartGetInteger 関数 整数型 のプロパティ。ENUM_CHART_PROPERTY_INTEGER で示されるプロパティを設定／取得できます（INTEGER という名前がついているけど実際は long 型であることに注意）。 ChartSetDouble 関数 / ChartGetDouble 関数 浮動小数点数型 のプロパティ。ENUM_CHART_PROPERTY_DOUBLE で示されるプロパティを設定／取得できます。 ChartSetString 関数 / ChartGetString 関数 文字列型 のプロパティ。ENUM_CHART_PROPERTY_STRING で示されるプロパティを設定／取得できます。 表示項目の OFF/ON 設定 チャートの表示項目を変更するには、ChartSetInteger 関数の第 2 引数 (prop_id) に以下のようなプロパティ ID を指定します。
プロパティ ID 設定内容 CHART_MODE CHART_BARS: バーチャート
CHART_CANDLES: ローソク足
CHART_LINE: 折れ線 CHART_SHOW_VOLUMES CHART_VOLUME_HIDE: ボリュームを表示しない
CHART_VOLUME_TICK: ボリュームとして Tick 数を表示する
CHART_VOLUME_REAL: ボリュームとして実際の取引量を表示する（サーバによって提供されていないことがある） CHART_SHOW_GRID true/false: グリッドを表示する／しない CHART_SHOW_PERIOD_SEP true/false: 一定期間ごとの縦線を表示する／しない CHART_SHOW_ASK_LINE true/false: 買値の水平線を表示する／しない CHART_SHOW_BID_LINE true/false: 売値の水平線を表示する／しない CHART_SHOW_DATE_SCALE true/false: 日時バー（横の軸）を表示する／しない CHART_SHOW_PRICE_SCALE true/false: 価格バー（縦の軸）を表示する／しない CHART_SHOW_OHLC true/false: 左上の Open/High/Low/Close 価格を表示する／しない（これを false にしても、通貨ペア名と時間足は表示されます） CHART_SHOW_ONE_CLICK true/false: 左上のワンクリック注文パネルを表示する／しない 例: チャートのプロパティを変更する /** * Setup the drawing style of the chart.</description></item><item><title>MetaTrader/MQL: 新しいチャートを開く (ChartOpen)</title><link>https://toushi.maku.blog/p/hx7enu3/</link><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/hx7enu3/</guid><description>ChartOpen 関数 を使うと、指定した通貨ペア、時間足のチャートを開くことができます。 下記は、ドル円の週足チャートを開く例です。 ChartOpen 関数が返したチャート ID を使って、開いたチャートの設定を行うことができます。
Scripts/Hello.mq5 void OnStart() { // 週足チャートを開く long chartId = ChartOpen(&amp;#34;USDJPY&amp;#34;, PERIOD_W1); if (chartId == 0) { // オープンに失敗した場合（シンボル名がおかしいとか、チャートを開きすぎとか） Alert(&amp;#34;Could not open a new chart: &amp;#34;, GetLastError()); return; } // 開いたチャートを設定する ChartSetInteger(chartId, CHART_MODE, CHART_LINE); // ライン形式 ChartSetInteger(chartId, CHART_SHOW_VOLUMES, CHART_VOLUME_TICK); // 出来高 ChartSetInteger(chartId, CHART_SHOW_GRID, false); // グリッドを非表示 } カレントチャートと同じ通貨ペアのチャートを新しく開きたい場合は、第 1 引数で &amp;quot;USDJPY&amp;quot; と指定しているところを NULL に置き換えれば OK です。 第 2 引数で指定する足のタイムフレームには、ENUM_TIMEFRAMES 型のいずれかの値を指定します。 PERIOD_CURRENT を指定して、カレントチャートと同じタイムフレームを指定することもできます。</description></item></channel></rss>