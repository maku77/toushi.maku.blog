<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MetaTrader/MQL: 雑多メモ on まくまく投資ノート</title><link>https://toushi.maku.blog/p/8t7it5f/</link><description>Recent content in MetaTrader/MQL: 雑多メモ on まくまく投資ノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Tue, 26 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://toushi.maku.blog/p/8t7it5f/index.xml" rel="self" type="application/rss+xml"/><item><title>MetaTrader/MQL: プログラムがデモ口座で実行されている調べる</title><link>https://toushi.maku.blog/p/e7gjidc/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/e7gjidc/</guid><description>MetaTrader で取引を行うスクリプトや EA をデバッグしているときに、間違えて実際の口座で実行してしまうと、不本意なポジションをとってしまい危険です。 下記のユーティリティ関数を使うと、実行中のプログラムがデモ口座上で実行されているかを調べることができます。
Include/maku77/Util.mqh namespace Util { /** * プログラムがデモ口座で実行されているか調べ、そうでなければ警告を表示します。 * * @return デモ口座で実行されているなら true、そうでないなら false */ bool IsDemoAccount() { if (AccountInfoInteger(ACCOUNT_TRADE_MODE) == ACCOUNT_TRADE_MODE_DEMO) { return true; } Alert(&amp;#34;Operation is not allowed on a live account!&amp;#34;); return false; } } 例えば、スクリプトのエントリポイント (OnStart 関数) の先頭で次のようにしておけば、スクリプトがデモ口座以外で実行されたときに実行を中止できます。
Scripts/Test.mq5 #include &amp;lt;maku77/Util.mqh&amp;gt; void OnStart() { if (!Util::IsDemoAccount()) return; // ... 残りの処理 ... }</description></item><item><title>MetaTrader/MQL: GitHub で MetaTrader 用のプログラムを管理する</title><link>https://toushi.maku.blog/p/od4bq8j/</link><pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/od4bq8j/</guid><description>MetaTrader (MT4/MT5) 用に作成した EA やカスタムインジケーターは大切な資産です。 ここでは、MetaTrader 用のプログラムを GitHub で管理する方法を説明します。
MetaTrader のデータディレクトリ MetaTrader では、自作した EA やカスタムインジケーター（.mq5 ファイルなど）は、あらかじめ用意されたデータディレクトリに格納することになっています。 このディレクトリのパスは、MetaTrader のデスクトップアプリや MetaEditor のメニューから次のように開いて確認することができます。
ファイル → データフォルダを開く （あるいは Ctrl + Shift + D） データフォルダのパスは環境ごとに異なり、例えば次のような感じになっています。
C:\Users\maku\AppData\Roaming\MetaQuotes\Terminal\84E63C3B90BC3EC3DADC66BC66DD0A1E 自作した .mq5 ファイルを保存するディレクトリは、このデータディレクトリ以下の MQL5/Experts や MQL5/Indicators ディレクトリになります。
しかし、データディレクトリには MetaTrader のインストーラーによって作成されたファイルなども含まれているため、MQL5 ディレクトリを丸ごと GitHub で管理しようとすると、余計なファイルがコミットされてしまいます。
そこで、自作したプログラムは別のディレクトリで管理して、データディレクトリからそのディレクトリに シンボリックリンク を張ることにします。
シンボリックリンクを作成する まずは、GitHub で作成したコード格納用のリポジトリを git clone しておきます。 ここでは、GitHub 上に metatrader という名前のリポジトリを作成済みで、作業用ディレクトリとして D:\y\gitwork を使うことを想定しています（パスは環境に合わせて調整してください）。
cd /d D:\y\gitwork git clone https://github.com/ユーザー名/metatrader ローカルに metatrader というディレクトリが作成されるので、この中に MQL5 ディレクトリを作成して、そこに自作の EA やインジケーターを格納することにします。 シンボリックリンクはディレクトリ単位で作成したいので、実際には次のようにもう一段階ディレクトリ作成します。 ここでは maku77 というディレクトリ名にしてますが、GitHub のユーザー名などにしておけばよいでしょう。</description></item><item><title>MQLマクロ: MQL4 と MQL5 のどちらでコンパイルされているか調べる</title><link>https://toushi.maku.blog/p/43cgihf/</link><pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/43cgihf/</guid><description>MQL のプログラムが MQL4 コンパイラでビルドされるとき、__MQL4__ マクロが定義されます。 これを利用すると、MQL4 用と MQL5 用のコードを分けて記述することができます。
#ifdef __MQL4__ MessageBox(&amp;#34;MQL4でコンパイルされています&amp;#34;); #else MessageBox(&amp;#34;MQL5でコンパイルされています&amp;#34;); #endif</description></item><item><title>MetaTrader/MQL: 組み込み関数の実行に失敗したときにエラー情報を表示する (GetLastError, ErrorDescription)</title><link>https://toushi.maku.blog/p/av9kv7g/</link><pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/av9kv7g/</guid><description>MQL の組み込み関数の実行に失敗した時には、GetLastError 関数によってそのエラーコードを取得できます。 このエラーコードは int 型の数値のため、その内容をテキストで取得したい場合は次のように変換する必要があります。
MT4 の場合 GetLastError 関数で取得したエラーコードを ErrorDescription に渡すことで、テキスト形式でエラー内容を取得することができます。 これらの関数を使用するには、stdlib.mqh をインクルードしておく必要があります。
下記は、ObjectCreate の実行に失敗した時のエラー表示の例です。
MQL4 // #include &amp;lt;stdlib.mqh&amp;gt; if (!ObjectCreate(0 , name, OBJ_LABEL, subWindow, 0, 0)) { Alert(&amp;#34;Failed to create a label: &amp;#34;, ErrorDescription(GetLastError())); return; } 表示例 Failed to create a label: object already exists MT5 の場合 MT5 の場合は、なんと ErrorDescription 関数が提供されてません（なんでやねん）。 正確には、MT4 で用意されていた stdlib.mqh が提供されていません。 代わりに、下記のサイトで、MetaQuotes 社からライブラリとして ErrorDescription.mqh ファイルが提供されています。 自分でダウンロードして使えということですね（なんでやねん）。
ErrorDescription - library for MetaTrader 5 これをダウンロードして MQL5/Inlude ディレクトリにコピーすれば、</description></item><item><title>MetaTrader/MQL: MQL での色の表現方法 (color)</title><link>https://toushi.maku.blog/p/rn6kw8j/</link><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/rn6kw8j/</guid><description>MQL コード内で色情報を表現する場合、color 型（日本語）の変数を使います。
color 変数は 4 バイトの数値で、後ろ 3 バイトでそれぞれ RGB の色情報 (0~255) を保持しています。 コード内で色を表すときは、下記のいずれかのリテラル形式で表現します。
C'r,g,b' 形式リテラル 定義済みのカラー名 4 バイト数値 // RGB 形式 C&amp;#39;128,128,128&amp;#39; // Gray C&amp;#39;0x00,0x00,0xFF&amp;#39; // Blue // 定義済みカラー値 clrRed // Red clrYellow // Yellow clrBlack // Black // 4 バイト整数 0xFFFFFF // White 16777215 // White 0x008000 // Green 32768 // Green clrRed のような定義済みのカラー値として何が用意されているかは、下記を参照してください。
参考リンク MQL5 - Web Colors（日本語）</description></item><item><title>MQLのプロパティ: プログラムの実行前に確認ダイアログを表示する (#property show_confirm)</title><link>https://toushi.maku.blog/p/6s6iu7i/</link><pubDate>Sun, 07 Dec 2014 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/6s6iu7i/</guid><description>プログラムの先頭に、下記のプロパティを設定しておくと、プログラムの実行前（チャートにアタッチしたとき）に、 本当に実行してよいかの確認ダイアログ が表示されるようになります。
#property show_confirm この確認ダイアログは、スクリプト、カスタム指標、EA のどの種類のプログラムでも有効です。</description></item></channel></rss>