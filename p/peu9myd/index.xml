<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>トレステ EashLanguage 入門 on まくまく投資ノート</title><link>https://toushi.maku.blog/p/peu9myd/</link><description>Recent content in トレステ EashLanguage 入門 on まくまく投資ノート</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Thu, 07 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://toushi.maku.blog/p/peu9myd/index.xml" rel="self" type="application/rss+xml"/><item><title>EasyLanguage のコーディングルール（スタイル）</title><link>https://toushi.maku.blog/p/5wet9n3/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/5wet9n3/</guid><description>スペース インデントは半角スペース x4 で行う（タブは使用しない）。 大文字・小文字 小文字で始める 制御構文: if、begin、and など プリミティブ型名: bool、double、null、スキップワード（a、at など） 変数定義: input: で宣言する入力変数や var: で宣言するローカル変数 大文字で始める 関数: AverageFC、StdDev など（ユーザー定義関数を含む） 売買命令: Buy、SellShort など（関数名っぽいので大文字で） 組み込み変数: Open、Close、CurrentBar、Date、Time など すべて大文字 定数: const: で宣言するもの 変数宣言のセクション名 入力変数は input:、定数は const:、変数は var: を使う（一番短い記述のものを採用）。
記述例 input: iPrice(Close) [DisplayName = &amp;#34;Price&amp;#34;, ToolTip = &amp;#34;Enter an EasyLanguage expression.&amp;#34;]; const: BASELINE_COLOR(&amp;#34;Green&amp;#34;); var: double myAvg(0), HorizontalLine myLine1(null), HorizontalLine myLine2(null); // ここから本文 上記では、入力変数のプレフィックスに i、ローカル変数のプレフィックスに my を付けていますが、付けなくても OK（myAvg の代わりに avg とかでよい）。 ただし、定義済みの変数名や関数名と被るのを避けるために、プレフィックスを付けるのをオススメします。
改行位置 then や begin は基本的に同じ行に続けて記述、end; は単独行に記述。 if AlertEnabled and alertCondition then begin if alertCond1 then Alert(&amp;#34;Close crossed under high retrace&amp;#34;) else Alert(&amp;#34;Close crossed over low retrace&amp;#34;); end; ただし、関数（メソッド）定義の場合は、begin の前に var 定義が挟まるので、その場合は begin は単独行に記述します。</description></item><item><title>EasyLanguage: ペイントバーを作成する</title><link>https://toushi.maku.blog/p/vyt8n3g/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/vyt8n3g/</guid><description>ペイントバーとは？ ペイントバーは、その名の通り、チャートのローソク足（バー）に色を付ける機能です。 通常、チャートの足は、陽線（赤）と陰線（青）で色分けしますが、ペイントバーを使用すると、任意の条件でバーを色分けすることができます。 上の日足チャートでは、月曜日のバーを緑色で描画するようにしています。
ペイントバーの新規作成 新しくペイントバーを作成するには、TradeStation 開発環境のメニューから下記のように辿ります。
ファイル → 新規作成 → ペイントバー インジケーター として新規作成してしまうと、ペイントバー の実装は行えないので注意してください（後述の PaintPB を呼び出せません）。
ペイントバーの実装 下記は、木曜日のローソク足に色を付けるペイントバーの実装例です。
#PB_Monday if DayOfWeek(Date) = Monday then begin PlotPB(High, Low, &amp;#34;Monday&amp;#34;, Green); end; ローソク足に色をつけるには、PlotPB（あるいは PlotPaintBar）を使用します。
PlotPB(価格1, 価格2, プロット名, 色); 例:
PlotPB(High, Low, &amp;quot;MyPB&amp;quot;, Yellow); &amp;hellip; ローソク足全体に色を付ける PlotPB(Open, Close, &amp;quot;MyPB&amp;quot;, Yellow); &amp;hellip; 実体部分（ひげを除く）に色を付ける 第 1 引数と、第 2 引数の上下関係は入れ替わっても同じ振る舞いになります。</description></item><item><title>EasyLanguage: レーダースクリーン用のインジケーターを作成する</title><link>https://toushi.maku.blog/p/ct3bjry/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/ct3bjry/</guid><description>インジケーターの新規作成 レーダースクリーン用のインジケーターを新しく作成するには、トレードステーション開発環境のメニューから、 ファイル → 新規作成 → インジケーター と辿ります。
インジケーターは、デフォルトでは「チャート分析」ウィンドウと、「レーダースクリーン」ウィンドウの両方に適用できるように設定されています（Plot1 や Plot2 で出力した値がどちらのウィンドウでも使われます）。 インジケーターを「レーダースクリーン」専用にするには、新規作成ダイアログで、下記のように「チャート分析」のチェックボックスを外します。
このようにインジケーターを作成すると、「レーダースクリーン」をアクティブにして分析テクニックを挿入するときだけ、インジケーターがリストに表示されるようになります。
レーダースクリーン用のインジケーター実装サンプル ここでは、下の図のように、レーダースクリーン上に 4 つの指標（指標1 〜 指標4）を表示するインジケーターを作成してみます。
!TestRader once begin // テキスト色 SetPlotColor(1, Cyan); SetPlotColor(2, Red); SetPlotColor(3, White); SetPlotColor(4, White); // 背景色 SetPlotBgColor(1, DarkBlue); SetPlotBgColor(2, DarkRed); SetPlotBgColor(3, Black); SetPlotBgColor(4, RGB(50, 80, 50)); end; once (LastBarOnChart) begin Plot1(100, &amp;#34;指標1&amp;#34;); Plot2(200, &amp;#34;指標2&amp;#34;); Plot3(&amp;#34;買い？&amp;#34;, &amp;#34;指標3&amp;#34;); Plot4(&amp;#34;売りでしょ&amp;#34;, &amp;#34;指標3&amp;#34;); end; 各セルのテキスト色や背景色は、SetPlotColor および SetPlotBgColor で設定することができます。 上記では、once begin でインジケーターのアタッチ時に一度だけ色設定しているので、全ての銘柄で同じ色になっていますが、本来は、何らかのシグナルが発生しているときにハイライト表示すると分かりやすいです。
セルに表示する値は、チャート分析のインジケーター同様、Plot1 や Plot2 を使用します。 第 1 引数で表示する値を指定するのですが、ここには数字だけでなく、文字列を指定することもできます。 第 2 引数には、カラム名として表示される文字列を指定します。 省略することもできますが、その場合は Plot1、Plot2 のように意味不明なカラム名になってしまうので、必ず指定するようにしましょう。</description></item><item><title>EasyLanguage: インジケーターサンプル「日毎の始値（寄付）価格にラインを引く」</title><link>https://toushi.maku.blog/p/7pz8gpx/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/7pz8gpx/</guid><description>概要 このインジケーターは、その日の寄付の価格にラインを引きます。 日毎の買い優勢・売り優勢の判断などに利用できます。 日をまたぐ部分は線を繋がない というテクニックも使っています。
コード Plot1(OpenD(0), &amp;#34;Open&amp;#34;, Green); if (Time = SessionEndTime(1, 1)) then begin SetPlotColor(1, Transparent); end; OpenD(0) で、日毎の始値を取得できるので、基本的にはこれをプロットしているだけです。
後半の if (Time = SessionEndTime(1, 1) という条件に一致した場合に、プロット色を透明 (Transparent) に設定することで、 日をまたぐ部分に線を引かない ようにしています。</description></item><item><title>EasyLanguage: インジケーターサンプル「本日のOHLCラインを表示する」</title><link>https://toushi.maku.blog/p/h4fr3dn/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/h4fr3dn/</guid><description>概要 このインジケーターは、本日の OHLC（始値、高値、安値、終値）にラインを描画します。 デイトレードで、上昇基調／下降基調などを判断するときなどに利用できます。
コード #OHLC_Lines { Author: Maku } using elsystem.drawing; using elsystem.drawingobjects; input: ColorOpen(DarkRed) [DisplayName = &amp;#34;本日の始値の色&amp;#34;], ColorHigh(LightGray) [DisplayName = &amp;#34;本日の高値の色&amp;#34;], ColorLow(LightGray) [DisplayName = &amp;#34;本日の安値の色&amp;#34;], ColorClose(Green) [DisplayName = &amp;#34;本日の終値の色&amp;#34;]; var: // HorizontalLine オブジェクト用の変数 HorizontalLine myLineOpen(null), HorizontalLine myLineHigh(null), HorizontalLine myLineLow(null), HorizontalLine myLineClose(null); once (LastBarOnChart) begin // チャート上に水平線を追加 myLineOpen = HorizontalLine.Create(OpenD(0)); myLineHigh = HorizontalLine.Create(HighD(0)); myLineLow = HorizontalLine.Create(LowD(0)); myLineClose = HorizontalLine.Create(CloseD(0)); // 線のスタイル myLineOpen.Style = elsystem.drawingobjects.StyleType.Solid; myLineHigh.Style = elsystem.drawingobjects.StyleType.Solid; myLineLow.Style = elsystem.</description></item><item><title>EasyLanguage: レーダースクリーンのセルのフォーマットを変更する（中央寄せ、小数点以下の表示など）</title><link>https://toushi.maku.blog/p/g9r8n3h/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/g9r8n3h/</guid><description>セル内のテキストを左寄せ／中央寄せ／右寄せ レーダースクリーン用のストラテジを作って、セル内にテキストを表示すると、デフォルトではすべて右寄せになったりして見映えがよくありません。 セル内のテキストを中央寄せなどで表示したいときは、次のように設定します。
TradeStation 開発環境のエディタ領域で右クリック → プロパティ を選択 グリッドのスタイル のタブの 整列する の項目で「中央寄せ」を選択 F3 キーで再コンパイル これで、レーダースクリーンにストラテジーを追加したときに、最初からセル内のテキストが中央寄せで表示されるようになります。 インジケータープロパティのダイアログで、プロット項目が出てこない場合は、一度 F3 キーでコンパイルしてから開き直すと表示されます。
（おまけ）上記の表示をするために使った EL コード !テストインジケーター once begin for Value1 = 1 to 3 begin SetPlotColor(Value1, White); SetPlotBgColor(Value1, DarkBlue); end; end; once (LastBarOnChart) begin Plot1(&amp;#34;左&amp;#34;, &amp;#34;指標1&amp;#34;); Plot2(&amp;#34;中&amp;#34;, &amp;#34;指標2&amp;#34;); Plot3(&amp;#34;右&amp;#34;, &amp;#34;指標3&amp;#34;); end; セル内の数値の表示フォーマットを設定する レーダースクリーンのセル内に表示する数値のフォーマットも、同様にインジケータープロパティから設定することができます。 上記の例では、指標1 から 指標4 まで全て同じ、123.45 という値をプロットしているのですが、数値の表示フォーマット設定で、小数点以下を何桁まで表示するかを変更しています。
指標1 &amp;hellip; 小数点以下 3 桁まで表示（上の図では、0 パディング） 指標2 &amp;hellip; 小数点以下 2 桁まで表示 指標3 &amp;hellip; 小数点以下 1 桁まで表示（上の図では、四捨五入で切り上げ） 指標4 &amp;hellip; 小数点以下 0 桁まで表示（上の図では、四捨五入で切り捨て） 下の図は設定の例です。</description></item><item><title>EasyLanguage: 独自インジケーターの線を元の銘柄のチャートに重ねて表示する</title><link>https://toushi.maku.blog/p/8v8hs3c/</link><pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/8v8hs3c/</guid><description>トレステで作成した独自のインジケーターをチャートに適用すると、デフォルトではサブチャート（別のウィンドウ）に描画されるようになっています。 デフォルトで最初の銘柄のウィンドウ領域に描画されるようにするには下記のように設定します。
トレードステーション開発環境の EasyLanguage エディタ領域で右クリック プロパティ を選択 スケーリング タブの スケール位置 で 元データに軸を合わせる を選択 F3 キーで再コンパイル</description></item><item><title>EasyLanguage の変数の特徴（値の伝搬のしくみ）</title><link>https://toushi.maku.blog/p/xgr3cku/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/xgr3cku/</guid><description>EasyLanguage でユーザー変数を定義するときは、次のように var: を使います（variables: でも OK）。
var: int hoge(0); このように定義した変数 hoge は、次のような性質を持ちます。
チャートにアタッチしたときのみ初期化される（上記の例では 0 に初期化される）。 変数に代入した値は、次の足の処理に引き継がれる。 hoge[n] とすると、n 本前の足の最終的な値を参照できる。hoge[0] は hoge と同じ意味になる。 この振る舞いは、次のようなサンプルコードを実行してみるとよく分かります。 このプログラムでは、初期値 0 の数値変数 hoge を定義し、各足の処理ごとにインクリメントしています。 そして最後に、現在の hoge の値と、1 つ前、2 つ前の足での hoge の値を出力しています。
サンプルコード var: int hoge(0); hoge += 1; Print(String.Format(&amp;#34;{0} {1} {2}&amp;#34;, hoge[0], hoge[1], hoge[2])); 実行結果 1 0 0 2 1 0 3 2 1 4 3 2 5 4 3 hoge に代入された値は次の足へと引き継がれていくため、1、2、3、4、5 とひとつずつ増えていきます。 最初の足の処理で、hoge[1]、hoge[2] のように過去の足の値を参照した場合は、初期値で設定している 0 が得られます。</description></item><item><title>EasyLanguage で垂直線を描画する (VerticalLine)</title><link>https://toushi.maku.blog/p/f3gs6gs/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/f3gs6gs/</guid><description>垂直線を引く方法 DrawingObjects.Add() で、VerticalLine オブジェクトを追加することで、画面上に垂直線を追加することができます。 これは、水平線 (HorizontalLine) を引く方法と同様です。
参考: 水平線を描画する (HorizontalLine) VerticalLine オブジェクトで垂直線を表示する コード 次のサンプルコードでは、日付が変わるタイミングで垂直線を描画しています。
#DateLine using elsystem.drawingobjects; var: bool myIsBarTypeProper(false), BNPoint myPoint(null), VerticalLine myLine(null); method void DrawVerticalLine() begin myPoint = BNPoint.Create(CurrentBar, 0); myLine = VerticalLine.Create(myPoint); myLine.Color = elsystem.drawing.Color.GreenYellow; myLine.Style = elsystem.drawingobjects.StyleType.Solid; myLine.Weight = 3; DrawingObjects.Add(myLine); end; once begin // ティック足(0)、分足(1)、秒足(14) のときのみ描画 myIsBarTypeProper = (BarType = 0) or (BarType = 1) or (BarType = 14); end; // 日付が変わった時に垂直線を描画 if myIsBarTypeProper and (Date &amp;gt; Date[1]) then begin DrawVerticalLine(); end; 解説 VerticalLine オブジェクトは、VerticalLine.</description></item><item><title>EasyLanguage で水平線を描画する (HorizontalLine)</title><link>https://toushi.maku.blog/p/ufr2cmv/</link><pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/ufr2cmv/</guid><description>水平線を引く方法 インジケーターで水平線を引くには下記のような方法があります。
Drawing Object の一種である HorizontalLine を追加する Plot1 関数などで固定 Price の線を引く 後者の方法は、Plot1(100) のように、固定価格でライン描画してしまう方法ですが、この値がインジケーターで求められた値として使われてしまうので、あまり望ましい方法ではないでしょう。 チャート上でローソク足が存在する部分しかラインが引かれないという欠点もあります。
そこで、ここでは前者の HorizontalLine を使った方法を採用することにします。
HorizontalLine オブジェクトで水平線を表示する DrawingObjects.Add() で、HorizontalLine オブジェクトを追加することで、画面上に水平線を追加することができます。 次のサンプルコードでは、各足の高値 (High) と安値 (Low) の位置に水平線を描画しています。
using elsystem.drawingobjects; // HorizontalLine オブジェクト用の変数 vars: HorizontalLine myLine1(null), HorizontalLine myLine2(null); // チャート上に水平線を追加 myLine1 = HorizontalLine.Create(High); myLine2 = HorizontalLine.Create(Low); DrawingObjects.Add(myLine1); DrawingObjects.Add(myLine2); // 水平線のスタイルや色、太さを変更可能 myLine1.Style = elsystem.drawingobjects.StyleType.Solid; myLine2.Style = elsystem.drawingobjects.StyleType.Dotted; myLine1.Color = elsystem.drawing.Color.Crimson; myLine2.Color = elsystem.drawing.Color.DeepSkyBlue; myLine1.Weight = 2; myLine2.Weight = 1; 参考リンク 垂直線を描画する (VerticalLine) インジケーターサンプル「本日のOHLCラインを表示する」</description></item><item><title>EasyLanguage: 印刷ログの内容をクリアする (ClearPrintLog)</title><link>https://toushi.maku.blog/p/znydp2d/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/znydp2d/</guid><description>Print 関数を使って「印刷ログ」ウィンドウにログを出力してデバッグしていると、どんどんログ出力が溜まっていくので、最後に適用したインジケーターの出力がどの行から始まっているかが分かりにくくなります。
そのような場合は、EasyLanguage のコード内から ClearPrintLog を呼び出すことで、「印刷ログ」の内容を自動でクリアすることができます（他の分析テクニックが出力した内容もクリアされてしまうことに注意してください）。
// インジケーター適用時にログをクリア once ClearPrintLog; // バー番号と終値をログ出力 Print(CurrentBar:4:0, &amp;#34;: Close = &amp;#34;, Close:0:0); ClearPrintLog をそのまま実行してしまうと、各足の処理で毎回ログをクリアすることになってしまうので、once を使って、インジケーターを適用したときに一度だけ実行するようにします。</description></item><item><title>EasyLanguage で入力変数の表示名を設定する (DisplayName)</title><link>https://toushi.maku.blog/p/req3doz/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/req3doz/</guid><description>EasyLanguage で作成するインジケーターでは、使用者が値を変更可能な入力変数を定義することができます。 インジケーターの設定ダイアログでは、デフォルトでは入力変数の名前がそのまま表示されるのですが、次のように DisplayName を指定することで、任意の表示名に変更することができます。
inputs: Price(Close) [DisplayName = &amp;#34;プロットする価格&amp;#34;]; インジケーターの設定ダイアログで、次のように表示名が変わっていることを確認できます。</description></item><item><title>EasyLanguage のストラテジーサンプル「移動平均のGC/DCによる売買」</title><link>https://toushi.maku.blog/p/5vds8n2/</link><pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate><guid>https://toushi.maku.blog/p/5vds8n2/</guid><description>2 本の移動平均線がクロスするタイミングで売買を行うストラテジです。 TradeStation には標準で付属しているストラテジとして、「単純移動平均2本クロス買いエントリー (ストラテジー)」がありますが、ここでは自力で実装する場合のサンプルとして示します。
ストラテジ概要 エントリタイミング 買いエントリ (Buy) の条件 短期移動平均線が長期移動平均線をゴールデンクロス (GC) 売りエントリ (SellShort) の条件 短期移動平均線が長期移動平均線をデッドクロス (DC) パラメータ fastLen: 短期移動平均の足数 slowLen: 長期移動平均の足数 ソースコード input: fastLen(5), slowLen(25); var: fastAvg(0), slowAvg(0); fastAvg = AverageFC(Close, fastLen); slowAvg = AverageFC(Close, slowLen); if fastAvg crosses over slowAvg then begin Buy next bar at market; end; if fastAvg crosses under slowAvg then begin SellShort next bar at market; end;</description></item></channel></rss>